name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'VERSION'

permissions:
  id-token: write   # OIDC 로그인을 위해 필수!
  contents: write

env:
  ACR_NAME: tetriscampacr  # Terraform output에서 확인한 실제 ACR 이름
  BACKEND_IMAGE_REPO: tetris-backend
  FRONTEND_IMAGE_REPO: tetris-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # 1. OIDC 방식으로 Azure에 로그인
      - name: 'Log in to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 2. 로그인 성공 확인
      - name: Verify Azure Login
        run: |
          echo "Current subscription:"
          az account show --output table
          echo "Available ACRs:"
          az acr list --output table
          
      # 3. ACR에 로그인
      - name: Login to Azure Container Registry
        run: |
          echo "Logging into ACR: ${{ env.ACR_NAME }}"
          az acr login --name ${{ env.ACR_NAME }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. 이미지 태그 설정
      - name: Set image tag
        id: set-image-tag
        run: |
          IMAGE_TAG=$(cat VERSION)
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Using image tag: ${IMAGE_TAG}"
          
      # 5. ACR 접근 권한 확인 (디버깅용)
      - name: 'Check ACR permission'
        run: |
          echo "Checking repositories in ${{ env.ACR_NAME }}..."
          az acr repository list --name ${{ env.ACR_NAME }} --output table || echo "No repositories found (this is normal for new ACR)"

      # 6. 백엔드 이미지 빌드 및 푸시 (개선안)
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/back-end/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_REPO }}:${{ steps.set-image-tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 7. 프론트엔드 이미지 빌드 및 푸시 (개선안)
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/front-end/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE_REPO }}:${{ steps.set-image-tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # 8. K8s Manifest 파일의 이미지 태그 업데이트
      - name: Update image tag in Kubernetes manifest
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          echo "Current backend image in manifest:"
          grep "image:" k8s-manifests/backend-deployment.yaml
          
          echo "Current frontend image in manifest:"
          grep "image:" k8s-manifests/frontend-deployment.yaml
          
          # sed 명령어로 deployment.yaml 파일의 이미지 태그를 새 버전으로 교체
          sed -i "s|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_REPO }}:.*|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_REPO }}:${{ steps.set-image-tag.outputs.IMAGE_TAG }}|g" k8s-manifests/backend-deployment.yaml
          sed -i "s|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE_REPO }}:.*|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE_REPO }}:${{ steps.set-image-tag.outputs.IMAGE_TAG }}|g" k8s-manifests/frontend-deployment.yaml
          
          echo "Updated backend image in manifest:"
          grep "image:" k8s-manifests/backend-deployment.yaml
          
          echo "Updated frontend image in manifest:"
          grep "image:" k8s-manifests/frontend-deployment.yaml
          
          # 변경사항이 있는지 확인
          if git diff --quiet; then
            echo "No changes to commit"
          else
            echo "Committing changes..."
            git add k8s-manifests/
            git commit -m "chore(ci): Update image tags to ${{ steps.set-image-tag.outputs.IMAGE_TAG }}"
            git push
            echo "Changes committed and pushed"
          fi
