# Test
name: Build and Push Image to ACR (CI)

# Github의 infra 브랜치에 코드가 push될 때 워크플로우 실행 (테스트)
# 테스트가 끝나면 main 브랜치에 push될 때마다 실행되도록 수정할 예정입니다!
on:
  push:
    branches: [ infra ]

# 환경변수 정의 (워크플로우에서 사용할 환경변수)
env:
  ACR_NAME: tetrisgameacr
  IMAGE_REPOSITORY: tetris-app
jobs:
  # ci 라는 이름의 작업 정의
  ci:
    runs-on: ubuntu-latest
    
    # 작업 결과를 다른 작업에서 사용할 수 있도록 설정 (이미지 태그 저장)
    outputs:
      IMAGE_TAG: ${{ steps.set-image-tag.outputs.IMAGE_TAG }}

    steps:
      # 1. 소스 코드 체크아웃 (현재 레포지토리의 코드를 워크플로우 실행 환경으로 가져옴)
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. 이미지 태그 설정 (VERSION 파일의 내용을 이미지 태그로 사용)
      - name: Set image tag
        id: set-image-tag
        run: echo "IMAGE_TAG=$(cat VERSION)" >> $GITHUB_OUTPUT
      
      # 3. ACR에 로그인 (GitHub Secrets에 저장된 Azure 서비스 주체를 이용해 ACR 로그인)
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      # 4. Dockerfile로 이미지 build
      - name: Build Docker image
        run: |
          docker build ./dev \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPOSITORY }}:${{ steps.set-image-tag.outputs.IMAGE_TAG }}

      # 5. 빌드된 Docker 이미지를 ACR로 push
      - name: Push Docker image to ACR
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPOSITORY }}:${{ steps.set-image-tag.outputs.IMAGE_TAG }}

